// project layout v1

class Project {
public:
    // song information settings
    string title;
    string author;
    string copyright;
    string comment;
    
    // global settings
    int machine;
    int framerate;
    int expansion;
    int vibrato;
    int split;
    int n163channels;

    // macro defs
    std::map<std::string, Macro> macros;
    
    // instrument defs
    std::map<int, BaseInstrument> instruments;
    
    // dpcm defs
    std::map<int, DpcmDef> dpcm_def;
    
    // groove defs
    std::map<int, Groove> grooves;
    std::vector<int> use_groove;

    // track defs
    std::map<int, Track> tracks;
};

class Macro {
public:
    int type_;
    int index_;
    int loop_;
    int release_;
    int setting_;
    std::vector<int> macro_; // sequence

    int get_val(int step, int mode){
        return val;
    }
};

class Track {
public:
    int num_rows;
    int num_cols;
    int speed;
    int tempo;
    int bpm;
    std::string name

    std::vector<int> eff_cols
    std::map<int, std::vector<int>> orders
    std::map<std::string, str::string> tokens;
}


class FamitrackerTextReader {
public:
    void read_file(std::string filename){
        std::string line;
        // read file line by line implementation

        load function pointers into a map
        lookup first word, if match, use that function:
            (*operation)(line);
        else:
            continue, maybe log "unrecognized line"
    }
private:
    int current_dpcm_index;
    int current_track_index;
    int current_pattern_index;
};

AbstractReaderStrategy // strategy for reading a line and loading it into a Project class
// contains a pure virtual method called handle(), contains a regex parser
// note that famitracker files are usually in windows text, so there could be weird ascii

// song information 
TitleStrategy
AuthorStrategy
CopyrightStrategy
CommentStrategy

// global settings
MachineStrategy
FramerateStrategy
ExpansionStrategy
VibratoStrategy
SplitStrategy
N163ChannelsStrategy

// macro defs
MacroStrategy

// dpcm defs
DpcmDefStrategy
DpcmDataStrategy

// groove defs
GrooveStrategy
UseGrooveStrategy

// inst defs
Inst2A03Strategy
InstVRC6Strategy
InstVRC7Strategy
InstFDSStrategy
InstN163Strategy
InstS5BStrategy

// special defs
KeyDpcmStrategy
FdsWaveStrategy
FdsModStrategy
FdsMacroStrategy
N163WaveStrategy

// track defs
TrackStrategy
ColumnsStrategy
OrderStrategy
PatternStrategy
RowStrategy

// macro generators
AbstractMacroFactory
Macro

// instrument generators
AbstractInstFactory
2A03InstFactory
VRC6InstFactory
VRC7InstFactory
N163InstFactory
S5BInstFactory
FDSInstFactory

